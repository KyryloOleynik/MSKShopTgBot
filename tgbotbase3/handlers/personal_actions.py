import structlog
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext  
from aiogram.fsm.state import State, StatesGroup  
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pydantic import BaseModel
import asyncio, random, aiomysql
from datetime import datetime
from aiogram import Bot
from typing import Optional
from decimal import Decimal

from fluent.runtime import FluentLocalization

# Declare router
router = Router()
bot = Bot(token="7857559139:AAHCFir0za6XOG7q0T8OAI5qaR0WXF-bd8E")
router.message.filter(F.chat.type == "private")

class Ticket(BaseModel):
    ticket_id: Optional[int]
    user_id: int
    issue_description: str
    status: str
    created_at: datetime

class UserStates(StatesGroup):
    waiting_for_order_id = State()
    waiting_for_payment_confirmation = State()
    
    waiting_for_explain_problem = State()
    waiting_for_support_answer = State()
    waiting_for_support_resolution = State()

# Declare logger
logger = structlog.get_logger()

async def connect_to_website_db():
    pool = await aiomysql.create_pool(
        host='localhost',
        user='sitedata',
        password='871455Ork',
        db='sitedata',
        autocommit=True
    )
    return pool

async def get_db_connection():
    pool = await aiomysql.create_pool(
        host='localhost',
        user='sql_support_msk5',
        password='clbiwz95yryqiihm',
        db='sql_support_msk5',
        autocommit=True
    )
    return pool

async def get_all_tickets_from_db():
    pool = await get_db_connection()
    async with pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute("SELECT * FROM tickets WHERE status != 'Answered';")
            result = await cursor.fetchall()
            return result

# Fix: make the function async and change its logic
async def insert_ticket_to_DB(ticket: Ticket):
    pool = await get_db_connection()
    async with pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(
                "INSERT INTO tickets (user_id, issue_description, status) VALUES (%s, %s, %s)",
                (ticket.user_id, ticket.issue_description, ticket.status)
            )
            ticket_id = cursor.lastrowid  
            return ticket_id

# Declare handlers
@router.message(Command("start"))
async def cmd_owner_hello(message: Message, l10n: FluentLocalization):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="OrderPay_call")],
            [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="Support_call")],
        ]    
    )
    await message.answer(l10n.format_value("hello-msg"), reply_markup=keyboard)

@router.callback_query(F.data=="OrderPay_call")
async def reply_order_pay(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ ID —Å–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞:")
    await state.set_state(UserStates.waiting_for_order_id)
    
@router.callback_query(F.data=="pay_cancel")
async def cancel_order_pay(callback_query: CallbackQuery):
    await trigger_offer_option_to_user(callback_query=callback_query)
    
@router.message(UserStates.waiting_for_order_id)
async def reply_on_user_order_id(message: Message, state: FSMContext):
    user_reply = message.text
    await asyncio.sleep(1)
    await state.set_state(UserStates.waiting_for_payment_confirmation)
    await state.update_data(user_reply=user_reply)
    pool = await connect_to_website_db()
    async with pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute("SELECT * FROM smartzamovapp_order WHERE id=%s",(user_reply, ))
            result = await cursor.fetchone()
            
    if result and result[5]==0:
        if result[12] == result[9]:
            currency = "—Ä—É–±"
            amount = int(result[12]/Decimal("1.7"))
        elif result[11] == result[9]:
            currency = "$"
            amount = int(result[11]/Decimal("0.019"))
        elif result[10] == result[9]:
            currency = "‚Ç¨"
            amount = int(result[10]/Decimal("0.01764"))
        await message.answer(f"–ó–∞–∫–∞–∑ —Å ID **{user_reply}** –Ω–∞–π–¥–µ–Ω!\n–ö –æ–ø–ª–∞—Ç–µ: {result[9]} {currency}.", parse_mode="Markdown")
        kb = InlineKeyboardBuilder()
        kb.button(
            text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} XTR",
            pay=True
        )
        kb.button(
            text=("–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"),
            callback_data="pay_cancel"
        )
        kb.adjust(1)
        
        prices = [LabeledPrice(label="XTR", amount=amount)]
        
        await message.answer_invoice(
            title=(f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ {user_reply}"),
            description = f"–ö –æ–ø–ª–∞—Ç–µ: {result[9]} {currency}. (–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: {amount} –∑–≤—ë–∑–¥)",
            prices=prices,
            
            provider_token="",
    
            payload=f"{amount}_stars",
    
            currency="XTR",
    
            reply_markup=kb.as_markup()
        )
    else:
        if result and result[5]==1:
            await message.answer(f"–ó–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º ID: **{user_reply}** —É–∂–µ –æ–ø–ª–∞—á–µ–Ω.", parse_mode="Markdown")
        else:
            await message.answer(f"–ü–æ –¥–∞–Ω–Ω–æ–º—É ID: **{user_reply}** . –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–∞ :(", parse_mode="Markdown")
        await state.clear()
        await trigger_offer_option_to_user(message=message)

@router.pre_checkout_query()
async def pre_checkout_query(query: PreCheckoutQuery):
    await query.answer(ok=True)

@router.message(F.successful_payment)
async def successful_payment_complete(message: Message, state: FSMContext):
    await asyncio.sleep(1)
    data = await state.get_data()
    user_reply = data.get("user_reply")
    await message.answer("–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥—ë–Ω! üéâ", message_effect_id="5046509860389126442")
    pool = await connect_to_website_db()
    async with pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute("UPDATE smartzamovapp_order SET is_paid=1 WHERE id=%s", (user_reply,))
    await state.clear()

async def trigger_offer_option_to_user(message: Message = None, callback_query: CallbackQuery = None):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="OrderPay_call")],
            [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="Support_call")],
        ]    
    )
    if message:
        await message.answer("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)
    else:
        await callback_query.message.answer("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)
    
@router.callback_query(F.data=="Support_call")
async def reply_to_user_about_help(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å")
    await state.set_state(UserStates.waiting_for_explain_problem)

@router.message(UserStates.waiting_for_explain_problem)
async def get_user_problem(message: Message, state: FSMContext):
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    text_message = message.text
    new_ticket = Ticket(ticket_id=None, user_id=user_id, issue_description=message.text, status="Opened", created_at=datetime.now())
    ticket_id = await insert_ticket_to_DB(new_ticket)
    support_chat_ids = [624349412, 1639670525]
    
    await message.answer(f"–í–∞—à —Ç–∏–∫–µ—Ç #{ticket_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞. –û–Ω –ø—Ä–∏–π–¥—ë—Ç –≤–∞–º –≤ —ç—Ç–æ—Ç —á–∞—Ç")
    await state.clear()
    await trigger_offer_option_to_user(message=message)
    
    for chat_id in support_chat_ids:
        await bot.send_message(chat_id, f"–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {full_name}. –ü—Ä–æ–±–ª–µ–º–∞: {text_message}")
    
@router.message(Command("reply_ticket"))
async def reply_to_ticket(message: Message, state: FSMContext):
    support_chat_ids = [624349412, 1639670525]
    if message.from_user.id not in support_chat_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ü—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤!")
        return
    
    try:
        ticket_id = int(message.text.split()[1])
        reply_on_ticket = " ".join(message.text.split()[2:])
    except:
        await message.answer("–§–æ—Ä–º–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    pool = await get_db_connection()
    async with pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute("UPDATE tickets SET status='Answered' WHERE ticket_id=%s", (ticket_id,))
            await cursor.execute("SELECT user_id,issue_description  FROM tickets WHERE ticket_id=%s", (ticket_id, ))
            result = await cursor.fetchone()
            
            if result:
                user_id = result[0]
                problem_desc = result[1]
                await bot.send_message(user_id, f"–¢–∏–∫–µ—Ç ID: #{ticket_id}\n–ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–∏–∫–µ—Ç–µ: {problem_desc}\n–û—Ç–≤–µ—Ç: {reply_on_ticket}")
                await message.answer(f"–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            else:
                await message.answer(f"–û—à–∏–±–∫–∞: –¢–∏–∫–µ—Ç #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@router.message(Command("view_all_tickets"))
async def view_all_tickets(message: Message):
    support_chat_ids = [624349412, 1639670525]
    if message.from_user.id not in support_chat_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ü—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤!")
        return
    
    all_tickets = await get_all_tickets_from_db()
    tickets_text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ç–æ–≤:\n\n"
    if all_tickets:
        for i, ticket in enumerate(all_tickets):
            if i == len(all_tickets) - 1:
                tickets_text += f"–¢–∏–∫–µ—Ç #{ticket[0]} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket[1]}): {ticket[2]} - –°—Ç–∞—Ç—É—Å: {ticket[3]}\n\n"
            else:
                tickets_text += f"–¢–∏–∫–µ—Ç #{ticket[0]} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket[1]}): {ticket[2]} - –°—Ç–∞—Ç—É—Å: {ticket[3]}\n"
        tickets_text += "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç: /reply_ticket –∞–π–¥–∏ —Ç–∏–∫–µ—Ç–∞ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç"
    else:
        tickets_text = "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤."
    
    await message.answer(tickets_text)
    
@router.message(Command("answer_format"))
async def type_answer_format(message: Message):
    support_chat_ids = [624349412, 1639670525]
    if message.from_user.id not in support_chat_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ü—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤!")
        return
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è 1 –ø—Ä–æ–±–µ–ª): /reply_ticket   –∞–π–¥–∏_—Ç–∏–∫–µ—Ç–∞   –û—Ç–≤–µ—Ç_–Ω–∞_—Ç–∏–∫–µ—Ç")
    